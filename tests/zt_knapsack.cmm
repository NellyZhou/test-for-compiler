//Expected output: 15

int max(int a, int b) {
    if (a >= b)
        return a;
    else return b;
}

int knapsack(int n, int w[15], int v[15], int x[15], int C) {
    int V[200][200];
    int i, j;

    i = 0;
    while (i <= n) {
        V[i][0] = 0;
        i = i + 1;
    }
    j = 0;
    while (j <= C) {
        V[0][j] = 0;
        j = j + 1;
    }

    i = 1;
    while (i <= n) {
        j = 1;
        while (j <= C) {
            if (j < w[i - 1]) {
                V[i][j] = V[i - 1][j];
            } else {
                V[i][j] = max(V[i - 1][j], V[i - 1][j - w[i - 1]] + v[i - 1]);
            }
            j = j + 1;
        }
        i = i + 1;
    }

    j = C;
    i = n;
    while (i >= 1) {
        if (V[i][j] > V[i - 1][j]) {
            x[i] = 1;
            j = j - w[i - 1];
        } else
            x[i] = 0;
        i = i - 1;
    }

    return V[n][C];

}

int main() {
    int s;//max value
    int w[15];//weight
    int v[15];//value
    int x[15];//choice
    int n, i;
    int C;

    //max capacity
    C = 10;

    //number of things
    n = 5;

    //weights
    w[0] = 2;
    w[1] = 2;
    w[2] = 6;
    w[3] = 5;
    w[4] = 4;


    //values
    v[0] = 6;
    v[1] = 3;
    v[2] = 5;
    v[3] = 4;
    v[4] = 6;

    s = knapsack(n, w, v, x, C);

    //max value
    write(s);
    return 0;
}
